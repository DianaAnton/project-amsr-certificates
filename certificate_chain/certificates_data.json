[
    {
        "id": "root",
        "common_name": "Root Certificate",
        "organization_name": "org",
        "country_name": "ro",
        "private_key_path": "./certificate_chain/root_private_key.pem",
        "certificate_path": "./certificate_chain/root_certificate.pem",
        "validity_period": 365
    },
    {
        "id": "intermediate_1",
        "common_name": "Intermediate Certificate 1",
        "organization_name": "org",
        "country_name": "ro",
        "private_key_path": "./certificate_chain/priv-1.pem",
        "certificate_path": "./certificate_chain/cert-1.pem",
        "validity_period": 365
    },
    {
        "id": "intermediate_2",
        "common_name": "Intermediate Certificate 2",
        "organization_name": "org",
        "country_name": "ro",
        "private_key_path": "./certificate_chain/priv-2.pem",
        "certificate_path": "./certificate_chain/cert-2.pem",
        "validity_period": 365
    },
    {
        "id": "final_intermediate",
        "common_name": "Final Intermediate Certificate",
        "organization_name": "org",
        "country_name": "ro",
        "private_key_path": "./certificate_chain/priv-3.pem",
        "certificate_path": "./certificate_chain/cert-3.pem",
        "validity_period": 365
<<<<<<< HEAD
 
    }
]





from cryptography import x509
from cryptography.x509.oid import ExtensionOID, NameOID
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.hashes import SHA256
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
import binascii


def generate_certificate(subject_name, issuer_name, issuer_private_key, issuer_certificate=None):
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048,
        backend=default_backend()
    )

    subject = x509.Name([
        x509.NameAttribute(NameOID.COMMON_NAME, subject_name),
    ])

    builder = x509.CertificateBuilder().subject_name(subject)

    if issuer_certificate:
        builder = builder.issuer_name(issuer_certificate.subject)
    else:
        builder = builder.issuer_name(issuer_name)

    valid_from = datetime.datetime.utcnow()
    valid_to = valid_from + datetime.timedelta(days=365)

    builder = builder.not_valid_before(valid_from).not_valid_after(valid_to)
    builder = builder.serial_number(x509.random_serial_number())

    builder = builder.public_key(private_key.public_key())

    if issuer_certificate:
        # Retrieve the issuer's public key
        issuer_public_key = issuer_certificate.public_key()

        # Compute subject key identifier from the issuer's public key
        issuer_public_key_bytes = issuer_public_key.public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        issuer_subject_key_identifier = x509.SubjectKeyIdentifier.from_public_key(issuer_public_key)

        builder = builder.add_extension(
            issuer_subject_key_identifier,
            critical=False
        )
        builder = builder.add_extension(
            x509.AuthorityKeyIdentifier.from_issuer_public_key(issuer_public_key),
            critical=False
        )

        certificate = builder.sign(
            private_key=issuer_private_key,
            algorithm=hashes.SHA256(),
            backend=default_backend()
        )
    else:
        builder = builder.add_extension(
            x509.BasicConstraints(ca=True, path_length=None),
            critical=True
        )

        # Compute subject key identifier from the root certificate's public key
        private_key_bytes = private_key.public_key().public_bytes(
            encoding=serialization.Encoding.DER,
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )
        subject_key_identifier = x509.SubjectKeyIdentifier.from_public_key(private_key.public_key())

        builder = builder.add_extension(
            subject_key_identifier,
            critical=False
        )

        certificate = builder.sign(
            private_key=private_key,
            algorithm=hashes.SHA256(),
            backend=default_backend()
        )

    return private_key, certificate
=======
    }
]
>>>>>>> 0141f04 (fixed generating chain certs)
